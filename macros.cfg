#####################################################################
#       Macros
#####################################################################

[gcode_macro G32]
gcode:
    #BED_MESH_CLEAR
    {% if printer.homed_axes != 'XYZ' %}
      G28			#Home All Axes
    {% endif %}
    QUAD_GANTRY_LEVEL
    G28
    G90
    ##  Uncomment for for your size printer:
    #--------------------------------------------------------------------
    ##  Uncomment for 250mm build
    #G0 X125 Y125 Z30 F3600

    ##  Uncomment for 300 build
    G0 X150 Y150 Z30 F3600

    ##  Uncomment for 350mm build
    #G0 X175 Y175 Z30 F3600
    #--------------------------------------------------------------------

[gcode_macro PRINT_START]
#   Use PRINT_START for the slicer starting script - optionally the parameters HOTEND and BED can be given
gcode:
    {% if params.BED %}
      M140 S{params.BED}    ; initiate bed heatup
    {% endif %}
    G28                     ; home all axes
    {% if params.BED %}
      M190 S{params.BED}    ; wait for bed heatup
    {% endif %}
    {% if params.HOTEND %}
      M104 S{params.HOTEND} ; initiate hotend heatup
    {% endif %}
    G32                     ; QGL
    ;BED_MESH_CALIBRATE
    {% if params.HOTEND %}
      M109 S{params.HOTEND} ; wait for hotend heatup
    {% endif %}
    {% if params.CLEAN_NOZZLE %}
      clean_nozzle
    {% endif %}
    G1 Z20 F3000            ; move nozzle away from bed

[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-2.0 F3600                 ; retract filament
    G91                            ; relative positioning
    G0 Z5 F20000
;    G0 Z1.00 X20.0 Y20.0 F20000    ; move nozzle to remove stringing
    TURN_OFF_HEATERS
    M107                           ; turn off fan
;    G1 Z2 F3000                    ; move nozzle up 2mm
    G90                            ; absolute positioning
    CLEAN_BED                      ; park nozzle
    G0 Z200 F20000
    BED_MESH_CLEAR
    M84

[gcode_macro CLEAN_BED]
gcode:
    G28                         ;
    G90                         ;
    G0 X150 Y290 Z200 F20000    ;
    G0 Y150                     ;

[gcode_macro UNLOAD]
gcode:
    G91                         ;
    M83                         ;
    G0 E5 F300                  ;
    G0 E-50 F300                ;
    G0 E-50 F300                ;
    M82                         ;
    G90                         ;

[gcode_macro PAUSE]
rename_existing: PAUSE_BASE
gcode:
    SAVE_GCODE_STATE NAME=octoprint_pause
    G91
    G0 Z35 F1000
    G90
    PAUSE_BASE

[gcode_macro RESUME]
rename_existing: RESUME_BASE
gcode:
    RESTORE_GCODE_STATE NAME=octoprint_pause MOVE=1 MOVE_SPEED=500
    ;RESUME_BASE
    ;RESPOND TYPE=command MSG:action:resumed

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
    TURN_OFF_HEATERS
    CANCEL_PRINT_BASE




[gcode_macro SEARCH_VARS]
gcode:
    {% set search = params.S|lower %}
    {% set ns = namespace() %}
    {% for item in printer  %}
        {% if ' ' in item %}
            {% set ns.path = ['printer', "['%s']" % (item), ''] %}
        {% else %}
            {% set ns.path = ['printer.', item, ''] %}   
        {% endif %} 

        {% if search in ns.path|lower %}
            { action_respond_info(ns.path|join) }
        {% endif %} 

        {% if printer[item].items() %}
            {% for childkey, child in printer[item].items() recursive %}
                {% set ns.path = ns.path[:loop.depth|int + 1] %}

                {% if ' ' in childkey %}
                    {% set null = ns.path.append("['%s']" % (childkey)) %}
                {% else %}
                    {% set null = ns.path.append(".%s" % (childkey)) %}
                {% endif %} 

                {% if child is mapping  %}
                    { loop(child.items()) }
                {% else %}
                    {% if search in ns.path|lower %}
                        { action_respond_info("%s : %s" % (ns.path|join, child)) }   
                    {% endif %} 
                {% endif %} 
                
            {% endfor %}
        {% endif %} 
    {% endfor %}
